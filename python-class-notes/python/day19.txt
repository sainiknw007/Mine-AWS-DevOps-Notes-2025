			Operators
			---------
what is Operator?
-----------------
the Operator is a special charecter,which is used to perform the operation on the data of the operands/objects.

	ex:
	---
	x=10
	y=20

	x + y	--> expression(it is a combination of both operands and operators)

		--> x and y are operands
		--> + is a operator
		--> 10 and 20 are the data of the operands

Types of Operators:
-------------------
the python supported operators are,

	1).Arithmetic Operators

	2).Comparission/Relational Operators

	3).Logical Operators

	4).Bitwise Operators

	5).Assignment Operators

	6).Identity Operators

	7).Membership Operators


Arithmetic Operators
---------------------
the Arithmetic Operators are used to perform the arithmetic Operations.

	Arithmetic 		Arithmetic 		input's		Result
	    Operation's		    Operator's		x=10,y=3
	-----------------------------------------------------------------------
	Addition			+		x+y		13

	Subtraction			-		x-y		7

	Multiplication			*		x*y		30

	Division			/		x/y		3.33335
				(Floating point division)

	Floor Division			//		x//y		3
				(Integer Division)

	Modulo				%		x%y		1

	Exponent			**		x**y		1000

ex:
---
	demo.py
	-------
x,y=10,3
print(x+y)
print(x-y)
print(x*y)
print(x/y)
print(x//y)
print(x%y)
print(x**y)

	output
	------
C:\Users\Lenovo\Desktop>python demo.py
13
7
30
3.3333333333333335
3
1
1000

Comparission/Relational Operators:
-----------------------------------
the Comparission/Relational Operators are used to compare the data of the operands or objects.

these operators are to return the output as boolean values like True or False.

the python supported Comparission/Relational Operators are ==,!=,<,<=,>,>=

ex:
----
	demo.py
	-------
x,y=10,3
print(x==y)
print(x!=y)
print(x<y)
print(x<=y)
print(x>y)
print(x>=y)

	output
	-------
C:\Users\Lenovo\Desktop>python demo.py
False
True
False
False
True
True

Logical Operators:
------------------
the Logical Operators are used to perform the mathmatical logical operations.

these operators are takes the input as boolean format and to return the output as boolean format.

	Logical Operation	Logical Operator
				C/C++	   Python
	----------------	-------------------
	Logical and 		  &&       and

	Logical or		  ||	   or

	Logical not		  !	   not


logical and truth table:

	ip_1	ip_2	ip_1 and ip_2
	------------------------------
	False	False		False
	False	True		False
	True	False		False
	True	True		True

logical or truth table:

	ip_1	ip_2	ip_1 or ip_2
	------------------------------
	False	False	     False
	False	True	     True
	True	False	     True
	True	True	     True

logical not truth table:

	ip		op(not ip)
	-------------------------
	False		True
	True		False

ex:
---
	demo.py
	-------
x,y=False,True
print(x and y) 
print(not x and y) 
print(x or y) 
print(x or not y) 
print(not x and not y) 
print(not y) 

	output
	------
C:\Users\Lenovo\Desktop>python demo.py
False
True
True
False
False
False

ex2:
----
>>> 9 and 1
1
>>> 1 and 9
9
>>> 0 and 9
0
>>> 1 and 0
0
>>> 0 and False
0
>>> False and 0
False

ex3:
----
>>> 9 or 1
9
>>> 1 or 9
1
>>> 0 or 9
9
>>> 1 or 0
1
>>> 0 or False
False
>>> False or 0
0

Bitwise Operators
-----------------
the Bitwise Operators are used to perform the operation on the binary data.

the Bitwise Operators takes the input as decimal and to return the output as decimal.

the Bitwise Operators are internally to perform the following operations,

	step1: to convert Decimal into Binary

	step2: to perform the operation on the binary data

	step3: to convert the Binary into Decimal

the python supported Bitwise Operators are,

	Bitwise and			-->	&
	Bitwise or			-->	|
	Bitwise xor			-->	^
	Bitwise negation		-->	~
	Bitwise leftshift		-->	<<
	Bitwise rightshift		-->	>>

Bitwise and(&) example:
-----------------------
>>> x=10
>>> y=3
>>> x&y
2

	step1: to convert Decimal into Binary
	-----
		x=10		--> 1010
		y=3		--> 0011

	step2: to perform the operation on the Binary data
	-----
ip_1	ip_2	ip_1 & ip_2
----------------------------
0	0	     0		x=1010
0	1	     0		y=0011
1	0	     0        x&y=0010
1	1	     1

	step3: to convert Binary into Decimal
	------
		0010
		0*2**3+0*2**2+1*2**1+0*2**0
		0*8+0*4+1*2+0*1
		0+0+2+0
		2

Bitwise or(|) example:
----------------------
>>> x=10
>>> y=3
>>> x|y
11

	step1: to convert Decimal into Binary
	-----
		x=10		--> 1010
		y=3		--> 0011

	step2: to perform the operation on the Binary data
	-----
ip_1	ip_2	ip_1 | ip_2
----------------------------
0	0	     0		x=1010
0	1	     1		y=0011
1	0	     1        x|y=1011
1	1	     1

	step3: to convert Binary into Decimal
	------
		1011
		1*2**3+0*2**2+1*2**1+1*2**0
		1*8+0*4+1*2+1*1
		8+0+2+1
		11

Bitwise xor(^) example:
------------------------
>>> x=10
>>> y=3
>>> x^y
9

	step1: to convert Decimal into Binary
	-----
		x=10		--> 1010
		y=3		--> 0011

	step2: to perform the operation on the Binary data
	-----
ip_1	ip_2	ip_1 ^ ip_2
----------------------------
0	0	     0		x=1010
0	1	     1		y=0011
1	0	     1        x^y=1001
1	1	     0

	step3: to convert Binary into Decimal
	------
		1001
		1*2**3+0*2**2+0*2**1+1*2**0
		1*8+0*4+0*2+1*1
		8+0+0+1
		9
		