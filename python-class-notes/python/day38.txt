Comprihension:
--------------
to generating the elements into the object dynamically by writeing some logic in that object, is known as a Comprihension.

the Comprihension is applicable only on mutable objects like list,set,dict

advantages:
-----------
to imrove the performance of the application
less code

disadvantages:
---------------
less readability i.e., typical to understand

List Comprihension:
------------------
to generate the elements into the list object dynamically by writeing some logic in that list object, is known as a List Comprihension.

we can implement the list comprihension to required minimum one list object and one for loop.

ex1:
----
write a python program to generate the 1 to N natural numbers into list object?

	demo.py
	------
num=int(input("enter your number: "))
x=[]
for i in range(1,num+1):
    x.append(i)
print(x)

	(or)

num=int(input("enter your number: "))
print([i for i in range(1,num+1)])

output:
------
enter your number: 10
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

ex2:
----
write a python program to generate the even numbers from 1 to N natural numbers into list object?

	demo.py
	-------
num=int(input("enter your number: "))
x=[]
for i in range(1,num+1):
    if i%2==0:
        x.append(i)
print(x)

	(or)

num=int(input("enter your number: "))
print([i for i in range(1,num+1) if i%2==0])

output:
------
enter your number: 10
[2, 4, 6, 8, 10]

ex3:
----
	demo.py
	-------
num=int(input("enter your number: "))
x=[]
for i in range(1,num+1):
    if i%2==0:
        x.append("Even")
    else:
        x.append("Odd")
print(x)

	(or)

num=int(input("enter your number: "))
print(["Even" if i%2==0 else "Odd" for i in range(1,num+1)])

output:
-------
enter your number: 10
['Odd', 'Even', 'Odd', 'Even', 'Odd', 'Even', 'Odd', 'Even', 'Odd', 'Even']

ex4:
---
write a python program input to the n of elements into list?

	demo.py
	-------
num=int(input("enter your number: "))
x=[]
for i in range(num):
    x.append(eval(input()))
print(x)

	(or)

num=int(input("enter your number: "))
print([eval(input()) for i in range(num)])

output:
------
enter your number: 5
2.3
4j
False
9
'siva'
[2.3, 4j, False, 9, 'siva']

ex5:
----
write a python program to input to the elements into nested list?

	demo.py
	-------
x=int(input("enter no.of list objects: "))
y=int(input("enter no.of elements in each list: "))
print([[eval(input()) for j in range(y)] for i in range(x)])

	output
	------
enter no.of list objects: 2
enter no.of elements in each list: 2
3
2.3
4j
False
[[3, 2.3], [4j, False]]

	output2
	-------
enter no.of list objects: 2
enter no.of elements in each list: 3
3
2.3
4j
False
'siva'
[6,7]
[[3, 2.3, 4j], [False, 'siva', [6, 7]]]

ex6:
----
write a python program to perform the matrix addition?

	demo.py
	-------
x=int(input("enter no.of list objects: "))
y=int(input("enter no.of elements in each list: "))
print("enter the elements into first matrix:")
a=[[eval(input()) for j in range(y)] for i in range(x)]
print("enter the elements into second matrix:")
b=[[eval(input()) for j in range(y)] for i in range(x)]
print("First Matrix:")
for row in a:
    print("\t",row)
print("Second Matrix:")
for row in b:
    print("\t",row)
c=[[a[i][j]+b[i][j] for j in range(y)] for i in range(x)]
print("Result Matrix:")
for row in c:
    print("\t",row)

	output
	------
enter no.of list objects: 2
enter no.of elements in each list: 2
enter the elements into first matrix:
3
2
5
1
enter the elements into second matrix:
2
5
4
2
First Matrix:
	 [3, 2]
	 [5, 1]
Second Matrix:
	 [2, 5]
	 [4, 2]
Result Matrix:
	 [5, 7]
	 [9, 3]

ex7:
----
write a python program to perform the transpose of a matrix?

	demo.py
	-------
x=int(input("enter no.of list objects: "))
y=int(input("enter no.of elements in each list: "))
print("enter the elements into input matrix:")
a=[[eval(input()) for j in range(y)] for i in range(x)]
print("input Matrix:")
for row in a:
    print("\t",row)
c=[[a[j][i] for j in range(x)] for i in range(y)]
print("Result Matrix:")
for row in c:
    print("\t",row)

	output
	-------
enter no.of list objects: 2
enter no.of elements in each list: 3
enter the elements into input matrix:
3
2
4
5
1
7
input Matrix:
	 [3, 2, 4]
	 [5, 1, 7]
Result Matrix:
	 [3, 5]
	 [2, 1]
	 [4, 7]

